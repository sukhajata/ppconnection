# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import connection_service_pb2 as connection__service__pb2


class ConnectionServiceStub(object):
  """
  message DataMsgRequest {
  string startTime = 1;
  string deviceEUI = 2;
  }

  message InstMsgData {
  repeated InstMsgDatum rows = 1;
  }

  message InstMsgDatum {
  string timestamp = 1;
  int32 phase = 2;
  float activepower = 3;
  float reactivepower = 4;
  float current = 5;
  float voltage = 6;
  }

  message ProcMsgData {
  repeated ProcMsgDatum rows = 1;
  }

  message ProcMsgDatum {
  string timestamp = 1;
  int32 phase = 2;
  int32 loopimpedance = 3;
  int32 rssi = 4;
  int32 snr = 5;
  int32 alivecnt = 6;
  int32 saifi = 7;
  int32 memfree = 8;
  int32 tempcnt = 9;
  int32 sustainedcnt = 10;
  int32 prolongedcnt = 11;
  }

  message PQMsgData {
  repeated PQMsgDatum rows = 1;
  }

  message PQMsgDatum {
  string timestamp = 1;
  int32 phase = 2;
  float voltageMax = 3;
  float currentMax = 4;
  float powerActiveMax = 5;
  float powerReactiveMax = 6;
  float thdvMax = 7;
  float voltageSMA = 8;
  float currentSMA = 9;
  float powerActiveSMA = 10;
  float powerReactiveSMA = 11;
  float thdvSMA = 12;
  float voltageMin = 13;
  float currentMin = 14;
  float powerActiveMin = 15;
  float powerReactiveMin = 16;
  float thdvMin = 17;
  int32 momentarySag = 18;
  int32 momentarySwell = 19;
  int32 temporarySag = 20;
  int32 temporarySwell = 21;
  int32 sustainedUnderVoltage = 22;
  int32 sustainedOverVoltage = 23;
  int32 prolongedUnderVoltage = 24;
  int32 prolongedOverVoltage = 25;
  }

  message GeoscanMsgData {
  repeated GeoscanMsgDatum rows = 1;
  }

  message GeoscanMsgDatum {
  string timestamp = 1;
  string rssid = 2;
  string bssid = 3;
  }

  message UplinkMsgData {
  repeated UplinkMsgDatum rows = 1;
  }

  message UplinkMsgDatum {
  string timestamp = 1;
  float rssi = 2;
  float snr = 3;
  int64 frequency = 4;
  }

  message DataQueryRequest {
  string where = 1;
  string orderBy = 2;
  bool desc = 3;
  int32 limit = 4;
  }

  message UplinkDayData {
  repeated UplinkDayDatum rows = 1;
  }

  message UplinkDayDatum {
  string idNumber = 1;
  string deviceEUI = 2;
  string serialNumber = 3;
  string day = 4;
  int32 totalMessages = 5;
  float avgRssi = 6;
  float avgSnr = 7;
  string streetAddress = 8;
  string town = 9;
  float latitude = 10;
  float longitude = 11;
  }

  message OpAlarmData {
  repeated OpAlarmDatum rows = 1;
  }

  message OpAlarmDatum {
  string timestamp = 1;
  string idNumber = 2;
  string deviceEUI = 3;
  string serialNumber = 4;
  string streetAddress = 5;
  string town = 6;
  float lat = 7;
  float lng = 8;
  string message = 9;
  }
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetConnections = channel.unary_unary(
        '/ppconnection.ConnectionService/GetConnections',
        request_serializer=connection__service__pb2.GetConnectionsRequest.SerializeToString,
        response_deserializer=connection__service__pb2.Connections.FromString,
        )
    self.GetLiveConnections = channel.unary_unary(
        '/ppconnection.ConnectionService/GetLiveConnections',
        request_serializer=connection__service__pb2.GetConnectionsRequest.SerializeToString,
        response_deserializer=connection__service__pb2.Connections.FromString,
        )
    self.GetConnectionsByTransformer = channel.unary_unary(
        '/ppconnection.ConnectionService/GetConnectionsByTransformer',
        request_serializer=connection__service__pb2.GetConnectionsByTransformerRequest.SerializeToString,
        response_deserializer=connection__service__pb2.Connections.FromString,
        )
    self.GetConnection = channel.unary_unary(
        '/ppconnection.ConnectionService/GetConnection',
        request_serializer=connection__service__pb2.Identifier.SerializeToString,
        response_deserializer=connection__service__pb2.Connection.FromString,
        )
    self.GetTransformers = channel.unary_unary(
        '/ppconnection.ConnectionService/GetTransformers',
        request_serializer=connection__service__pb2.Empty.SerializeToString,
        response_deserializer=connection__service__pb2.TransformerList.FromString,
        )
    self.CreateConnection = channel.unary_unary(
        '/ppconnection.ConnectionService/CreateConnection',
        request_serializer=connection__service__pb2.CreateConnectionRequest.SerializeToString,
        response_deserializer=connection__service__pb2.Identifier.FromString,
        )
    self.CreatePendingConnection = channel.unary_unary(
        '/ppconnection.ConnectionService/CreatePendingConnection',
        request_serializer=connection__service__pb2.Connection.SerializeToString,
        response_deserializer=connection__service__pb2.Identifier.FromString,
        )
    self.CreateMultiplePendingConnections = channel.unary_unary(
        '/ppconnection.ConnectionService/CreateMultiplePendingConnections',
        request_serializer=connection__service__pb2.MultipleConnectionRequest.SerializeToString,
        response_deserializer=connection__service__pb2.Identifiers.FromString,
        )
    self.UpdateConnection = channel.unary_unary(
        '/ppconnection.ConnectionService/UpdateConnection',
        request_serializer=connection__service__pb2.UpdateConnectionRequest.SerializeToString,
        response_deserializer=connection__service__pb2.Response.FromString,
        )
    self.DeleteConnection = channel.unary_unary(
        '/ppconnection.ConnectionService/DeleteConnection',
        request_serializer=connection__service__pb2.Identifier.SerializeToString,
        response_deserializer=connection__service__pb2.Response.FromString,
        )
    self.UpdateConnectionState = channel.unary_unary(
        '/ppconnection.ConnectionService/UpdateConnectionState',
        request_serializer=connection__service__pb2.UpdateConnectionStateRequest.SerializeToString,
        response_deserializer=connection__service__pb2.Response.FromString,
        )
    self.UpdateJob = channel.unary_unary(
        '/ppconnection.ConnectionService/UpdateJob',
        request_serializer=connection__service__pb2.UpdateJobRequest.SerializeToString,
        response_deserializer=connection__service__pb2.Response.FromString,
        )
    self.UpdateLines = channel.unary_unary(
        '/ppconnection.ConnectionService/UpdateLines',
        request_serializer=connection__service__pb2.UpdateLinesRequest.SerializeToString,
        response_deserializer=connection__service__pb2.Response.FromString,
        )
    self.UpdateMount = channel.unary_unary(
        '/ppconnection.ConnectionService/UpdateMount',
        request_serializer=connection__service__pb2.UpdateMountRequest.SerializeToString,
        response_deserializer=connection__service__pb2.Response.FromString,
        )
    self.GetAddress = channel.unary_unary(
        '/ppconnection.ConnectionService/GetAddress',
        request_serializer=connection__service__pb2.GetAddressRequest.SerializeToString,
        response_deserializer=connection__service__pb2.Location.FromString,
        )
    self.CreateDevice = channel.unary_unary(
        '/ppconnection.ConnectionService/CreateDevice',
        request_serializer=connection__service__pb2.Device.SerializeToString,
        response_deserializer=connection__service__pb2.Response.FromString,
        )
    self.GetDeviceBySerialNumber = channel.unary_unary(
        '/ppconnection.ConnectionService/GetDeviceBySerialNumber',
        request_serializer=connection__service__pb2.GetDeviceBySerialNumberRequest.SerializeToString,
        response_deserializer=connection__service__pb2.Device.FromString,
        )
    self.CreateImage = channel.unary_unary(
        '/ppconnection.ConnectionService/CreateImage',
        request_serializer=connection__service__pb2.ConnectionImage.SerializeToString,
        response_deserializer=connection__service__pb2.Identifier.FromString,
        )
    self.GetImage = channel.unary_unary(
        '/ppconnection.ConnectionService/GetImage',
        request_serializer=connection__service__pb2.Identifier.SerializeToString,
        response_deserializer=connection__service__pb2.ConnectionImage.FromString,
        )
    self.DeleteImage = channel.unary_unary(
        '/ppconnection.ConnectionService/DeleteImage',
        request_serializer=connection__service__pb2.Identifier.SerializeToString,
        response_deserializer=connection__service__pb2.Response.FromString,
        )


class ConnectionServiceServicer(object):
  """
  message DataMsgRequest {
  string startTime = 1;
  string deviceEUI = 2;
  }

  message InstMsgData {
  repeated InstMsgDatum rows = 1;
  }

  message InstMsgDatum {
  string timestamp = 1;
  int32 phase = 2;
  float activepower = 3;
  float reactivepower = 4;
  float current = 5;
  float voltage = 6;
  }

  message ProcMsgData {
  repeated ProcMsgDatum rows = 1;
  }

  message ProcMsgDatum {
  string timestamp = 1;
  int32 phase = 2;
  int32 loopimpedance = 3;
  int32 rssi = 4;
  int32 snr = 5;
  int32 alivecnt = 6;
  int32 saifi = 7;
  int32 memfree = 8;
  int32 tempcnt = 9;
  int32 sustainedcnt = 10;
  int32 prolongedcnt = 11;
  }

  message PQMsgData {
  repeated PQMsgDatum rows = 1;
  }

  message PQMsgDatum {
  string timestamp = 1;
  int32 phase = 2;
  float voltageMax = 3;
  float currentMax = 4;
  float powerActiveMax = 5;
  float powerReactiveMax = 6;
  float thdvMax = 7;
  float voltageSMA = 8;
  float currentSMA = 9;
  float powerActiveSMA = 10;
  float powerReactiveSMA = 11;
  float thdvSMA = 12;
  float voltageMin = 13;
  float currentMin = 14;
  float powerActiveMin = 15;
  float powerReactiveMin = 16;
  float thdvMin = 17;
  int32 momentarySag = 18;
  int32 momentarySwell = 19;
  int32 temporarySag = 20;
  int32 temporarySwell = 21;
  int32 sustainedUnderVoltage = 22;
  int32 sustainedOverVoltage = 23;
  int32 prolongedUnderVoltage = 24;
  int32 prolongedOverVoltage = 25;
  }

  message GeoscanMsgData {
  repeated GeoscanMsgDatum rows = 1;
  }

  message GeoscanMsgDatum {
  string timestamp = 1;
  string rssid = 2;
  string bssid = 3;
  }

  message UplinkMsgData {
  repeated UplinkMsgDatum rows = 1;
  }

  message UplinkMsgDatum {
  string timestamp = 1;
  float rssi = 2;
  float snr = 3;
  int64 frequency = 4;
  }

  message DataQueryRequest {
  string where = 1;
  string orderBy = 2;
  bool desc = 3;
  int32 limit = 4;
  }

  message UplinkDayData {
  repeated UplinkDayDatum rows = 1;
  }

  message UplinkDayDatum {
  string idNumber = 1;
  string deviceEUI = 2;
  string serialNumber = 3;
  string day = 4;
  int32 totalMessages = 5;
  float avgRssi = 6;
  float avgSnr = 7;
  string streetAddress = 8;
  string town = 9;
  float latitude = 10;
  float longitude = 11;
  }

  message OpAlarmData {
  repeated OpAlarmDatum rows = 1;
  }

  message OpAlarmDatum {
  string timestamp = 1;
  string idNumber = 2;
  string deviceEUI = 3;
  string serialNumber = 4;
  string streetAddress = 5;
  string town = 6;
  float lat = 7;
  float lng = 8;
  string message = 9;
  }
  """

  def GetConnections(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLiveConnections(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetConnectionsByTransformer(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetConnection(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTransformers(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateConnection(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreatePendingConnection(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateMultiplePendingConnections(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateConnection(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteConnection(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateConnectionState(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateJob(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateLines(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateMount(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAddress(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateDevice(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetDeviceBySerialNumber(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateImage(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetImage(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteImage(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ConnectionServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetConnections': grpc.unary_unary_rpc_method_handler(
          servicer.GetConnections,
          request_deserializer=connection__service__pb2.GetConnectionsRequest.FromString,
          response_serializer=connection__service__pb2.Connections.SerializeToString,
      ),
      'GetLiveConnections': grpc.unary_unary_rpc_method_handler(
          servicer.GetLiveConnections,
          request_deserializer=connection__service__pb2.GetConnectionsRequest.FromString,
          response_serializer=connection__service__pb2.Connections.SerializeToString,
      ),
      'GetConnectionsByTransformer': grpc.unary_unary_rpc_method_handler(
          servicer.GetConnectionsByTransformer,
          request_deserializer=connection__service__pb2.GetConnectionsByTransformerRequest.FromString,
          response_serializer=connection__service__pb2.Connections.SerializeToString,
      ),
      'GetConnection': grpc.unary_unary_rpc_method_handler(
          servicer.GetConnection,
          request_deserializer=connection__service__pb2.Identifier.FromString,
          response_serializer=connection__service__pb2.Connection.SerializeToString,
      ),
      'GetTransformers': grpc.unary_unary_rpc_method_handler(
          servicer.GetTransformers,
          request_deserializer=connection__service__pb2.Empty.FromString,
          response_serializer=connection__service__pb2.TransformerList.SerializeToString,
      ),
      'CreateConnection': grpc.unary_unary_rpc_method_handler(
          servicer.CreateConnection,
          request_deserializer=connection__service__pb2.CreateConnectionRequest.FromString,
          response_serializer=connection__service__pb2.Identifier.SerializeToString,
      ),
      'CreatePendingConnection': grpc.unary_unary_rpc_method_handler(
          servicer.CreatePendingConnection,
          request_deserializer=connection__service__pb2.Connection.FromString,
          response_serializer=connection__service__pb2.Identifier.SerializeToString,
      ),
      'CreateMultiplePendingConnections': grpc.unary_unary_rpc_method_handler(
          servicer.CreateMultiplePendingConnections,
          request_deserializer=connection__service__pb2.MultipleConnectionRequest.FromString,
          response_serializer=connection__service__pb2.Identifiers.SerializeToString,
      ),
      'UpdateConnection': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateConnection,
          request_deserializer=connection__service__pb2.UpdateConnectionRequest.FromString,
          response_serializer=connection__service__pb2.Response.SerializeToString,
      ),
      'DeleteConnection': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteConnection,
          request_deserializer=connection__service__pb2.Identifier.FromString,
          response_serializer=connection__service__pb2.Response.SerializeToString,
      ),
      'UpdateConnectionState': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateConnectionState,
          request_deserializer=connection__service__pb2.UpdateConnectionStateRequest.FromString,
          response_serializer=connection__service__pb2.Response.SerializeToString,
      ),
      'UpdateJob': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateJob,
          request_deserializer=connection__service__pb2.UpdateJobRequest.FromString,
          response_serializer=connection__service__pb2.Response.SerializeToString,
      ),
      'UpdateLines': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateLines,
          request_deserializer=connection__service__pb2.UpdateLinesRequest.FromString,
          response_serializer=connection__service__pb2.Response.SerializeToString,
      ),
      'UpdateMount': grpc.unary_unary_rpc_method_handler(
          servicer.UpdateMount,
          request_deserializer=connection__service__pb2.UpdateMountRequest.FromString,
          response_serializer=connection__service__pb2.Response.SerializeToString,
      ),
      'GetAddress': grpc.unary_unary_rpc_method_handler(
          servicer.GetAddress,
          request_deserializer=connection__service__pb2.GetAddressRequest.FromString,
          response_serializer=connection__service__pb2.Location.SerializeToString,
      ),
      'CreateDevice': grpc.unary_unary_rpc_method_handler(
          servicer.CreateDevice,
          request_deserializer=connection__service__pb2.Device.FromString,
          response_serializer=connection__service__pb2.Response.SerializeToString,
      ),
      'GetDeviceBySerialNumber': grpc.unary_unary_rpc_method_handler(
          servicer.GetDeviceBySerialNumber,
          request_deserializer=connection__service__pb2.GetDeviceBySerialNumberRequest.FromString,
          response_serializer=connection__service__pb2.Device.SerializeToString,
      ),
      'CreateImage': grpc.unary_unary_rpc_method_handler(
          servicer.CreateImage,
          request_deserializer=connection__service__pb2.ConnectionImage.FromString,
          response_serializer=connection__service__pb2.Identifier.SerializeToString,
      ),
      'GetImage': grpc.unary_unary_rpc_method_handler(
          servicer.GetImage,
          request_deserializer=connection__service__pb2.Identifier.FromString,
          response_serializer=connection__service__pb2.ConnectionImage.SerializeToString,
      ),
      'DeleteImage': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteImage,
          request_deserializer=connection__service__pb2.Identifier.FromString,
          response_serializer=connection__service__pb2.Response.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ppconnection.ConnectionService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
