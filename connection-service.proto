syntax = "proto3";

package ppconnection;

message Connections {
    repeated Connection connections = 1;
}

message Connection {
	bool active = 1;
    enum ConnectionState {
        NO_CONNECTION_STATE = 0;
        PENDING = 1;
        CONNECTED = 2;
    }
    ConnectionState connectionState = 2;
    enum ConnectionType {
        NO_CONNECTION_TYPE = 0;
        ICP = 1;
        ASSET = 2;
    }
    ConnectionType connectionType = 3;
    string dateCreated = 4;
	Device device = 5;
	string IDNumber = 6;
	int32 numPhases = 7;
	int32 line1 = 8;
    int32 line2 = 9;
    int32 line3 = 10;
    Location location = 11;
    enum ModelType {
        NO_MODEL_TYPE = 0;
        M11 = 1;
        M31 = 2;
    }
    ModelType modelType = 12;
    Mount mount = 13;
    string nickName = 14;
    string type = 15;
    Job job = 16;
    string id = 17;
    string transformer = 18;
}

message Job {
    bool active = 1;
    string comments = 2;
    string notes = 3;
    string dateCreated = 4;
    enum JobState {
        NO_JOB_STATE = 0;
        PENDING = 1;
        CONFIGURED = 2;
        INSTALLED = 3;
        TESTED = 4;
        FAILED = 5;
    }
    JobState jobState = 5;
    string reasonForFailure = 6;
    TestResult testResult = 7;
}

message TestResult {
    float downlinkRSSI = 1;
    float downlinkSNR = 2;
    Line line1 = 3;
    Line line2 = 4;
    Line line3 = 5;
    bool received = 6;
    float software = 7;
    float uplinkRSSI = 8;
    float uplinkSNR = 9;
}

message Line {
    float current = 1;
    float voltage = 2;
}

message Location {
    string streetAddress1 = 1;
    string streetAddress2 = 2;
    string town = 3;
    string country = 4;
    float lng = 5;
    float lat = 6;
}

message Mount {
    bool active = 1;
    Location location = 2;
    string mountNumber = 3;
    enum MountType {
        NO_MOUNT_TYPE = 0;
        CROSSARM = 1;
        SWITCHBOARD = 2;
        METER_BOX = 3;
        SUBSTATION = 4;
        PILLAR_BOX = 5;
    }
    MountType mountType = 4;
    enum EnclosureType {
        NO_ENCLOSURE_TYPE = 0;
        SINGLE = 1;
        DOUBLE = 2;
        TRIPLE = 3;
    }
    EnclosureType enclosureType = 5;
    string enclosureId = 6;
}

message Device {
    bool active = 1;
    string deviceEUI = 2;
	LoRaDetails loRaDetails = 3;
    string macAddress = 4;
    int32 modelType = 5;
    string mqttConnectionString = 6;
    int32 serialNumber = 7;
    string ppNumber = 8;
}

message LoRaDetails {
    string applicationEUI = 1;
    string applicationSoftwareKey = 2;
	string deviceAddress = 3;
	string networkSoftwareKey = 4;
}

message GetConnectionsRequest {
    bool active = 1;
}

message Identifier {
    string identifier = 1;
}

message CreateConnectionRequest {
    string oldIdentifier = 1;
    Connection connection = 2;
}

message UpdateConnectionRequest {
    string identifier = 1;
    Connection connection = 2;
}

message UpdateMountRequest {
    string identifier = 1;
    Mount mount = 2;
}

message UpdateDeviceRequest {
    string identifier = 1;
    Device device = 2;
}

message UpdateConnectionStateRequest {
    string identifier = 1;
    Connection.ConnectionState connectionState = 2;
}

message UpdateJobRequest {
    string identifier = 1;
    Job job = 2;
}

message UpdateLinesRequest {
    string identifier = 1;
    int32 line1 = 2;
    int32 line2 = 3;
    int32 line3 = 4;
}

message GetAddressRequest {
    string installNumber = 1;
}

message GetDeviceBySerialNumberRequest {
    string serialNumber = 1;
}

message Response {
    string reply = 1;
}

message Address {
    string streetAddress = 1;
    string town = 2;
    string country = 3;
}

message LatLng {
    float lat = 1;
    float lng = 2;
}

message Empty {

}

message DataMsgRequest {
    string startTime = 1;
    string deviceEUI = 2;
}

message InstMsgData {
    repeated InstMsgDatum rows = 1;
}

message InstMsgDatum {
    string timestamp = 1;
    int32 phase = 2;
    float activepower = 3;
    float reactivepower = 4;
    float current = 5;
    float voltage = 6;
}

message ProcMsgData {
    repeated ProcMsgDatum rows = 1;
}

message ProcMsgDatum {
    string timestamp = 1;
    int32 phase = 2;
	int32 loopimpedance = 3;
	int32 rssi = 4;
	int32 snr = 5;
    int32 alivecnt = 6;
    int32 saifi = 7;
    int32 memfree = 8;
    int32 tempcnt = 9;
    int32 sustainedcnt = 10;
    int32 prolongedcnt = 11;
}

message PQMsgData {
    repeated PQMsgDatum rows = 1;
}

message PQMsgDatum {
    string timestamp = 1;
    int32 phase = 2;
    float voltageMax = 3;
    float currentMax = 4;
    float powerActiveMax = 5;
    float powerReactiveMax = 6;
    float thdvMax = 7;
    float voltageSMA = 8;
    float currentSMA = 9;
    float powerActiveSMA = 10;
    float powerReactiveSMA = 11;
    float thdvSMA = 12;
    float voltageMin = 13;
    float currentMin = 14;
    float powerActiveMin = 15;
    float powerReactiveMin = 16;
    float thdvMin = 17;
    int32 momentarySag = 18;
    int32 momentarySwell = 19;
    int32 temporarySag = 20;
    int32 temporarySwell = 21;
    int32 sustainedUnderVoltage = 22;
    int32 sustainedOverVoltage = 23;
    int32 prolongedUnderVoltage = 24;
    int32 prolongedOverVoltage = 25;
}

message GeoscanMsgData {
    repeated GeoscanMsgDatum rows = 1;
}

message GeoscanMsgDatum {
    string timestamp = 1;
    string rssid = 2;
    string bssid = 3;
}

message UplinkMsgData {
    repeated UplinkMsgDatum rows = 1;
}

message UplinkMsgDatum {
    string timestamp = 1;
    float rssi = 2;
    float snr = 3;
    int64 frequency = 4;
}

service ConnectionService {

    rpc GetConnections(GetConnectionsRequest) returns (Connections) {}

    rpc GetLiveConnections(GetConnectionsRequest) returns (Connections) {}

    rpc GetBlankConnection(Empty) returns (Connection) {}

    rpc GetConnection(Identifier) returns (Connection) {}

    rpc UpdateMount(UpdateMountRequest) returns (Response) {}

    rpc CreateConnection(CreateConnectionRequest) returns (Identifier) {}

    rpc CreatePendingConnection(Connection) returns (Identifier) {}

    rpc UpdateConnection(UpdateConnectionRequest) returns (Response) {}

    rpc DeleteConnection(Identifier) returns (Response) {}

    rpc UpdateDevice(UpdateDeviceRequest) returns (Response) {}

    rpc UpdateConnectionState(UpdateConnectionStateRequest) returns (Response) {}

    rpc UpdateJob(UpdateJobRequest) returns (Response) {}

    rpc UpdateLines(UpdateLinesRequest) returns (Response) {}

    rpc GetAddress(GetAddressRequest) returns (Location) {}

    rpc Geocode(Address) returns (LatLng) {}

    rpc GetDeviceBySerialNumber(GetDeviceBySerialNumberRequest) returns (Device) {}

    rpc GetInstMsgData(DataMsgRequest) returns (InstMsgData) {}

    rpc GetProcMsgData(DataMsgRequest) returns (ProcMsgData) {}

    rpc GetPQMsgData(DataMsgRequest) returns (PQMsgData) {}

    rpc GetGeoscanMsgData(DataMsgRequest) returns (GeoscanMsgData) {}

    rpc GetUplinkMsgData(DataMsgRequest) returns (UplinkMsgData) {}

}