// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.0
// source: connection-service.proto

package ppconnection

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Connection_ConnectionState int32

const (
	Connection_NO_CONNECTION_STATE Connection_ConnectionState = 0
	Connection_PENDING             Connection_ConnectionState = 1
	Connection_CONNECTED           Connection_ConnectionState = 2
)

// Enum value maps for Connection_ConnectionState.
var (
	Connection_ConnectionState_name = map[int32]string{
		0: "NO_CONNECTION_STATE",
		1: "PENDING",
		2: "CONNECTED",
	}
	Connection_ConnectionState_value = map[string]int32{
		"NO_CONNECTION_STATE": 0,
		"PENDING":             1,
		"CONNECTED":           2,
	}
)

func (x Connection_ConnectionState) Enum() *Connection_ConnectionState {
	p := new(Connection_ConnectionState)
	*p = x
	return p
}

func (x Connection_ConnectionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connection_ConnectionState) Descriptor() protoreflect.EnumDescriptor {
	return file_connection_service_proto_enumTypes[0].Descriptor()
}

func (Connection_ConnectionState) Type() protoreflect.EnumType {
	return &file_connection_service_proto_enumTypes[0]
}

func (x Connection_ConnectionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connection_ConnectionState.Descriptor instead.
func (Connection_ConnectionState) EnumDescriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{2, 0}
}

type Connection_ConnectionType int32

const (
	Connection_NO_CONNECTION_TYPE Connection_ConnectionType = 0
	Connection_ICP                Connection_ConnectionType = 1
	Connection_ASSET              Connection_ConnectionType = 2
)

// Enum value maps for Connection_ConnectionType.
var (
	Connection_ConnectionType_name = map[int32]string{
		0: "NO_CONNECTION_TYPE",
		1: "ICP",
		2: "ASSET",
	}
	Connection_ConnectionType_value = map[string]int32{
		"NO_CONNECTION_TYPE": 0,
		"ICP":                1,
		"ASSET":              2,
	}
)

func (x Connection_ConnectionType) Enum() *Connection_ConnectionType {
	p := new(Connection_ConnectionType)
	*p = x
	return p
}

func (x Connection_ConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connection_ConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_connection_service_proto_enumTypes[1].Descriptor()
}

func (Connection_ConnectionType) Type() protoreflect.EnumType {
	return &file_connection_service_proto_enumTypes[1]
}

func (x Connection_ConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connection_ConnectionType.Descriptor instead.
func (Connection_ConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{2, 1}
}

type Connection_ModelType int32

const (
	Connection_NO_MODEL_TYPE Connection_ModelType = 0
	Connection_M11           Connection_ModelType = 1
	Connection_M31           Connection_ModelType = 2
	Connection_M31s          Connection_ModelType = 3
	Connection_M31x          Connection_ModelType = 4
)

// Enum value maps for Connection_ModelType.
var (
	Connection_ModelType_name = map[int32]string{
		0: "NO_MODEL_TYPE",
		1: "M11",
		2: "M31",
		3: "M31s",
		4: "M31x",
	}
	Connection_ModelType_value = map[string]int32{
		"NO_MODEL_TYPE": 0,
		"M11":           1,
		"M31":           2,
		"M31s":          3,
		"M31x":          4,
	}
)

func (x Connection_ModelType) Enum() *Connection_ModelType {
	p := new(Connection_ModelType)
	*p = x
	return p
}

func (x Connection_ModelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Connection_ModelType) Descriptor() protoreflect.EnumDescriptor {
	return file_connection_service_proto_enumTypes[2].Descriptor()
}

func (Connection_ModelType) Type() protoreflect.EnumType {
	return &file_connection_service_proto_enumTypes[2]
}

func (x Connection_ModelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Connection_ModelType.Descriptor instead.
func (Connection_ModelType) EnumDescriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{2, 2}
}

type Job_JobState int32

const (
	Job_NO_JOB_STATE Job_JobState = 0
	Job_PENDING      Job_JobState = 1
	Job_CONFIGURED   Job_JobState = 2
	Job_INSTALLED    Job_JobState = 3
	Job_TESTED       Job_JobState = 4
	Job_FAILED       Job_JobState = 5
)

// Enum value maps for Job_JobState.
var (
	Job_JobState_name = map[int32]string{
		0: "NO_JOB_STATE",
		1: "PENDING",
		2: "CONFIGURED",
		3: "INSTALLED",
		4: "TESTED",
		5: "FAILED",
	}
	Job_JobState_value = map[string]int32{
		"NO_JOB_STATE": 0,
		"PENDING":      1,
		"CONFIGURED":   2,
		"INSTALLED":    3,
		"TESTED":       4,
		"FAILED":       5,
	}
)

func (x Job_JobState) Enum() *Job_JobState {
	p := new(Job_JobState)
	*p = x
	return p
}

func (x Job_JobState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Job_JobState) Descriptor() protoreflect.EnumDescriptor {
	return file_connection_service_proto_enumTypes[3].Descriptor()
}

func (Job_JobState) Type() protoreflect.EnumType {
	return &file_connection_service_proto_enumTypes[3]
}

func (x Job_JobState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Job_JobState.Descriptor instead.
func (Job_JobState) EnumDescriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{3, 0}
}

type Mount_MountType int32

const (
	Mount_NO_MOUNT_TYPE Mount_MountType = 0
	Mount_CROSSARM      Mount_MountType = 1
	Mount_SWITCHBOARD   Mount_MountType = 2
	Mount_METER_BOX     Mount_MountType = 3
	Mount_SUBSTATION    Mount_MountType = 4
	Mount_PILLAR_BOX    Mount_MountType = 5
)

// Enum value maps for Mount_MountType.
var (
	Mount_MountType_name = map[int32]string{
		0: "NO_MOUNT_TYPE",
		1: "CROSSARM",
		2: "SWITCHBOARD",
		3: "METER_BOX",
		4: "SUBSTATION",
		5: "PILLAR_BOX",
	}
	Mount_MountType_value = map[string]int32{
		"NO_MOUNT_TYPE": 0,
		"CROSSARM":      1,
		"SWITCHBOARD":   2,
		"METER_BOX":     3,
		"SUBSTATION":    4,
		"PILLAR_BOX":    5,
	}
)

func (x Mount_MountType) Enum() *Mount_MountType {
	p := new(Mount_MountType)
	*p = x
	return p
}

func (x Mount_MountType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mount_MountType) Descriptor() protoreflect.EnumDescriptor {
	return file_connection_service_proto_enumTypes[4].Descriptor()
}

func (Mount_MountType) Type() protoreflect.EnumType {
	return &file_connection_service_proto_enumTypes[4]
}

func (x Mount_MountType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mount_MountType.Descriptor instead.
func (Mount_MountType) EnumDescriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{7, 0}
}

type Mount_EnclosureType int32

const (
	Mount_NO_ENCLOSURE_TYPE Mount_EnclosureType = 0
	Mount_SINGLE            Mount_EnclosureType = 1
	Mount_DOUBLE            Mount_EnclosureType = 2
	Mount_TRIPLE            Mount_EnclosureType = 3
)

// Enum value maps for Mount_EnclosureType.
var (
	Mount_EnclosureType_name = map[int32]string{
		0: "NO_ENCLOSURE_TYPE",
		1: "SINGLE",
		2: "DOUBLE",
		3: "TRIPLE",
	}
	Mount_EnclosureType_value = map[string]int32{
		"NO_ENCLOSURE_TYPE": 0,
		"SINGLE":            1,
		"DOUBLE":            2,
		"TRIPLE":            3,
	}
)

func (x Mount_EnclosureType) Enum() *Mount_EnclosureType {
	p := new(Mount_EnclosureType)
	*p = x
	return p
}

func (x Mount_EnclosureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mount_EnclosureType) Descriptor() protoreflect.EnumDescriptor {
	return file_connection_service_proto_enumTypes[5].Descriptor()
}

func (Mount_EnclosureType) Type() protoreflect.EnumType {
	return &file_connection_service_proto_enumTypes[5]
}

func (x Mount_EnclosureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mount_EnclosureType.Descriptor instead.
func (Mount_EnclosureType) EnumDescriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{7, 1}
}

type Connections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connections []*Connection `protobuf:"bytes,1,rep,name=connections,proto3" json:"connections,omitempty"`
}

func (x *Connections) Reset() {
	*x = Connections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connections) ProtoMessage() {}

func (x *Connections) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connections.ProtoReflect.Descriptor instead.
func (*Connections) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{0}
}

func (x *Connections) GetConnections() []*Connection {
	if x != nil {
		return x.Connections
	}
	return nil
}

type MultipleConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Connection *Connection `protobuf:"bytes,1,opt,name=connection,proto3" json:"connection,omitempty"`
	Count      int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *MultipleConnectionRequest) Reset() {
	*x = MultipleConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultipleConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultipleConnectionRequest) ProtoMessage() {}

func (x *MultipleConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultipleConnectionRequest.ProtoReflect.Descriptor instead.
func (*MultipleConnectionRequest) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{1}
}

func (x *MultipleConnectionRequest) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

func (x *MultipleConnectionRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type Connection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active          bool                       `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	ConnectionState Connection_ConnectionState `protobuf:"varint,2,opt,name=connectionState,proto3,enum=ppconnection.Connection_ConnectionState" json:"connectionState,omitempty"`
	ConnectionType  Connection_ConnectionType  `protobuf:"varint,3,opt,name=connectionType,proto3,enum=ppconnection.Connection_ConnectionType" json:"connectionType,omitempty"`
	DateCreated     string                     `protobuf:"bytes,4,opt,name=dateCreated,proto3" json:"dateCreated,omitempty"`
	Device          *Device                    `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	IDNumber        string                     `protobuf:"bytes,6,opt,name=IDNumber,proto3" json:"IDNumber,omitempty"`
	NumPhases       int32                      `protobuf:"varint,7,opt,name=numPhases,proto3" json:"numPhases,omitempty"`
	Line1           int32                      `protobuf:"varint,8,opt,name=line1,proto3" json:"line1,omitempty"`
	Line2           int32                      `protobuf:"varint,9,opt,name=line2,proto3" json:"line2,omitempty"`
	Line3           int32                      `protobuf:"varint,10,opt,name=line3,proto3" json:"line3,omitempty"`
	Location        *Location                  `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
	ModelType       Connection_ModelType       `protobuf:"varint,12,opt,name=modelType,proto3,enum=ppconnection.Connection_ModelType" json:"modelType,omitempty"`
	Mount           *Mount                     `protobuf:"bytes,13,opt,name=mount,proto3" json:"mount,omitempty"`
	NickName        string                     `protobuf:"bytes,14,opt,name=nickName,proto3" json:"nickName,omitempty"`
	Type            string                     `protobuf:"bytes,15,opt,name=type,proto3" json:"type,omitempty"`
	Job             *Job                       `protobuf:"bytes,16,opt,name=job,proto3" json:"job,omitempty"`
	Id              string                     `protobuf:"bytes,17,opt,name=id,proto3" json:"id,omitempty"`
	Transformer     string                     `protobuf:"bytes,18,opt,name=transformer,proto3" json:"transformer,omitempty"`
	Rating          int64                      `protobuf:"varint,19,opt,name=rating,proto3" json:"rating,omitempty"`
	Images          []string                   `protobuf:"bytes,20,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *Connection) Reset() {
	*x = Connection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Connection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Connection) ProtoMessage() {}

func (x *Connection) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Connection.ProtoReflect.Descriptor instead.
func (*Connection) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{2}
}

func (x *Connection) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Connection) GetConnectionState() Connection_ConnectionState {
	if x != nil {
		return x.ConnectionState
	}
	return Connection_NO_CONNECTION_STATE
}

func (x *Connection) GetConnectionType() Connection_ConnectionType {
	if x != nil {
		return x.ConnectionType
	}
	return Connection_NO_CONNECTION_TYPE
}

func (x *Connection) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

func (x *Connection) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *Connection) GetIDNumber() string {
	if x != nil {
		return x.IDNumber
	}
	return ""
}

func (x *Connection) GetNumPhases() int32 {
	if x != nil {
		return x.NumPhases
	}
	return 0
}

func (x *Connection) GetLine1() int32 {
	if x != nil {
		return x.Line1
	}
	return 0
}

func (x *Connection) GetLine2() int32 {
	if x != nil {
		return x.Line2
	}
	return 0
}

func (x *Connection) GetLine3() int32 {
	if x != nil {
		return x.Line3
	}
	return 0
}

func (x *Connection) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Connection) GetModelType() Connection_ModelType {
	if x != nil {
		return x.ModelType
	}
	return Connection_NO_MODEL_TYPE
}

func (x *Connection) GetMount() *Mount {
	if x != nil {
		return x.Mount
	}
	return nil
}

func (x *Connection) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *Connection) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Connection) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *Connection) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Connection) GetTransformer() string {
	if x != nil {
		return x.Transformer
	}
	return ""
}

func (x *Connection) GetRating() int64 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Connection) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active           bool         `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	Comments         string       `protobuf:"bytes,2,opt,name=comments,proto3" json:"comments,omitempty"`
	Notes            string       `protobuf:"bytes,3,opt,name=notes,proto3" json:"notes,omitempty"`
	DateCreated      string       `protobuf:"bytes,4,opt,name=dateCreated,proto3" json:"dateCreated,omitempty"`
	JobState         Job_JobState `protobuf:"varint,5,opt,name=jobState,proto3,enum=ppconnection.Job_JobState" json:"jobState,omitempty"`
	ReasonForFailure string       `protobuf:"bytes,6,opt,name=reasonForFailure,proto3" json:"reasonForFailure,omitempty"`
	TestResult       *TestResult  `protobuf:"bytes,7,opt,name=testResult,proto3" json:"testResult,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{3}
}

func (x *Job) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Job) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *Job) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Job) GetDateCreated() string {
	if x != nil {
		return x.DateCreated
	}
	return ""
}

func (x *Job) GetJobState() Job_JobState {
	if x != nil {
		return x.JobState
	}
	return Job_NO_JOB_STATE
}

func (x *Job) GetReasonForFailure() string {
	if x != nil {
		return x.ReasonForFailure
	}
	return ""
}

func (x *Job) GetTestResult() *TestResult {
	if x != nil {
		return x.TestResult
	}
	return nil
}

type TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DownlinkRSSI float32 `protobuf:"fixed32,1,opt,name=downlinkRSSI,proto3" json:"downlinkRSSI,omitempty"`
	DownlinkSNR  float32 `protobuf:"fixed32,2,opt,name=downlinkSNR,proto3" json:"downlinkSNR,omitempty"`
	Line1        *Line   `protobuf:"bytes,3,opt,name=line1,proto3" json:"line1,omitempty"`
	Line2        *Line   `protobuf:"bytes,4,opt,name=line2,proto3" json:"line2,omitempty"`
	Line3        *Line   `protobuf:"bytes,5,opt,name=line3,proto3" json:"line3,omitempty"`
	Received     bool    `protobuf:"varint,6,opt,name=received,proto3" json:"received,omitempty"`
	Software     float32 `protobuf:"fixed32,7,opt,name=software,proto3" json:"software,omitempty"`
	UplinkRSSI   float32 `protobuf:"fixed32,8,opt,name=uplinkRSSI,proto3" json:"uplinkRSSI,omitempty"`
	UplinkSNR    float32 `protobuf:"fixed32,9,opt,name=uplinkSNR,proto3" json:"uplinkSNR,omitempty"`
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{4}
}

func (x *TestResult) GetDownlinkRSSI() float32 {
	if x != nil {
		return x.DownlinkRSSI
	}
	return 0
}

func (x *TestResult) GetDownlinkSNR() float32 {
	if x != nil {
		return x.DownlinkSNR
	}
	return 0
}

func (x *TestResult) GetLine1() *Line {
	if x != nil {
		return x.Line1
	}
	return nil
}

func (x *TestResult) GetLine2() *Line {
	if x != nil {
		return x.Line2
	}
	return nil
}

func (x *TestResult) GetLine3() *Line {
	if x != nil {
		return x.Line3
	}
	return nil
}

func (x *TestResult) GetReceived() bool {
	if x != nil {
		return x.Received
	}
	return false
}

func (x *TestResult) GetSoftware() float32 {
	if x != nil {
		return x.Software
	}
	return 0
}

func (x *TestResult) GetUplinkRSSI() float32 {
	if x != nil {
		return x.UplinkRSSI
	}
	return 0
}

func (x *TestResult) GetUplinkSNR() float32 {
	if x != nil {
		return x.UplinkSNR
	}
	return 0
}

type Line struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current float32 `protobuf:"fixed32,1,opt,name=current,proto3" json:"current,omitempty"`
	Voltage float32 `protobuf:"fixed32,2,opt,name=voltage,proto3" json:"voltage,omitempty"`
}

func (x *Line) Reset() {
	*x = Line{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Line) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Line) ProtoMessage() {}

func (x *Line) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Line.ProtoReflect.Descriptor instead.
func (*Line) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{5}
}

func (x *Line) GetCurrent() float32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Line) GetVoltage() float32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreetAddress1 string  `protobuf:"bytes,1,opt,name=streetAddress1,proto3" json:"streetAddress1,omitempty"`
	StreetAddress2 string  `protobuf:"bytes,2,opt,name=streetAddress2,proto3" json:"streetAddress2,omitempty"`
	Town           string  `protobuf:"bytes,3,opt,name=town,proto3" json:"town,omitempty"`
	Country        string  `protobuf:"bytes,4,opt,name=country,proto3" json:"country,omitempty"`
	Lng            float32 `protobuf:"fixed32,5,opt,name=lng,proto3" json:"lng,omitempty"`
	Lat            float32 `protobuf:"fixed32,6,opt,name=lat,proto3" json:"lat,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{6}
}

func (x *Location) GetStreetAddress1() string {
	if x != nil {
		return x.StreetAddress1
	}
	return ""
}

func (x *Location) GetStreetAddress2() string {
	if x != nil {
		return x.StreetAddress2
	}
	return ""
}

func (x *Location) GetTown() string {
	if x != nil {
		return x.Town
	}
	return ""
}

func (x *Location) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location) GetLng() float32 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *Location) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

type Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active        bool                `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	Location      *Location           `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	MountNumber   string              `protobuf:"bytes,3,opt,name=mountNumber,proto3" json:"mountNumber,omitempty"`
	MountType     Mount_MountType     `protobuf:"varint,4,opt,name=mountType,proto3,enum=ppconnection.Mount_MountType" json:"mountType,omitempty"`
	EnclosureType Mount_EnclosureType `protobuf:"varint,5,opt,name=enclosureType,proto3,enum=ppconnection.Mount_EnclosureType" json:"enclosureType,omitempty"`
	EnclosureId   string              `protobuf:"bytes,6,opt,name=enclosureId,proto3" json:"enclosureId,omitempty"`
}

func (x *Mount) Reset() {
	*x = Mount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mount) ProtoMessage() {}

func (x *Mount) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mount.ProtoReflect.Descriptor instead.
func (*Mount) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{7}
}

func (x *Mount) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Mount) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Mount) GetMountNumber() string {
	if x != nil {
		return x.MountNumber
	}
	return ""
}

func (x *Mount) GetMountType() Mount_MountType {
	if x != nil {
		return x.MountType
	}
	return Mount_NO_MOUNT_TYPE
}

func (x *Mount) GetEnclosureType() Mount_EnclosureType {
	if x != nil {
		return x.EnclosureType
	}
	return Mount_NO_ENCLOSURE_TYPE
}

func (x *Mount) GetEnclosureId() string {
	if x != nil {
		return x.EnclosureId
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active               bool         `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	DeviceEUI            string       `protobuf:"bytes,2,opt,name=deviceEUI,proto3" json:"deviceEUI,omitempty"`
	LoRaDetails          *LoRaDetails `protobuf:"bytes,3,opt,name=loRaDetails,proto3" json:"loRaDetails,omitempty"`
	MacAddress           string       `protobuf:"bytes,4,opt,name=macAddress,proto3" json:"macAddress,omitempty"`
	ModelType            int32        `protobuf:"varint,5,opt,name=modelType,proto3" json:"modelType,omitempty"`
	MqttConnectionString string       `protobuf:"bytes,6,opt,name=mqttConnectionString,proto3" json:"mqttConnectionString,omitempty"`
	SerialNumber         int32        `protobuf:"varint,7,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	PpNumber             string       `protobuf:"bytes,8,opt,name=ppNumber,proto3" json:"ppNumber,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{8}
}

func (x *Device) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Device) GetDeviceEUI() string {
	if x != nil {
		return x.DeviceEUI
	}
	return ""
}

func (x *Device) GetLoRaDetails() *LoRaDetails {
	if x != nil {
		return x.LoRaDetails
	}
	return nil
}

func (x *Device) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Device) GetModelType() int32 {
	if x != nil {
		return x.ModelType
	}
	return 0
}

func (x *Device) GetMqttConnectionString() string {
	if x != nil {
		return x.MqttConnectionString
	}
	return ""
}

func (x *Device) GetSerialNumber() int32 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *Device) GetPpNumber() string {
	if x != nil {
		return x.PpNumber
	}
	return ""
}

type LoRaDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationEUI         string `protobuf:"bytes,1,opt,name=applicationEUI,proto3" json:"applicationEUI,omitempty"`
	ApplicationSoftwareKey string `protobuf:"bytes,2,opt,name=applicationSoftwareKey,proto3" json:"applicationSoftwareKey,omitempty"`
	DeviceAddress          string `protobuf:"bytes,3,opt,name=deviceAddress,proto3" json:"deviceAddress,omitempty"`
	NetworkSoftwareKey     string `protobuf:"bytes,4,opt,name=networkSoftwareKey,proto3" json:"networkSoftwareKey,omitempty"`
}

func (x *LoRaDetails) Reset() {
	*x = LoRaDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoRaDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoRaDetails) ProtoMessage() {}

func (x *LoRaDetails) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoRaDetails.ProtoReflect.Descriptor instead.
func (*LoRaDetails) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{9}
}

func (x *LoRaDetails) GetApplicationEUI() string {
	if x != nil {
		return x.ApplicationEUI
	}
	return ""
}

func (x *LoRaDetails) GetApplicationSoftwareKey() string {
	if x != nil {
		return x.ApplicationSoftwareKey
	}
	return ""
}

func (x *LoRaDetails) GetDeviceAddress() string {
	if x != nil {
		return x.DeviceAddress
	}
	return ""
}

func (x *LoRaDetails) GetNetworkSoftwareKey() string {
	if x != nil {
		return x.NetworkSoftwareKey
	}
	return ""
}

type GetConnectionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *GetConnectionsRequest) Reset() {
	*x = GetConnectionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionsRequest) ProtoMessage() {}

func (x *GetConnectionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionsRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionsRequest) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{10}
}

func (x *GetConnectionsRequest) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type GetConnectionsByTransformerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransformerNumber string `protobuf:"bytes,1,opt,name=transformerNumber,proto3" json:"transformerNumber,omitempty"`
}

func (x *GetConnectionsByTransformerRequest) Reset() {
	*x = GetConnectionsByTransformerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConnectionsByTransformerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConnectionsByTransformerRequest) ProtoMessage() {}

func (x *GetConnectionsByTransformerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConnectionsByTransformerRequest.ProtoReflect.Descriptor instead.
func (*GetConnectionsByTransformerRequest) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{11}
}

func (x *GetConnectionsByTransformerRequest) GetTransformerNumber() string {
	if x != nil {
		return x.TransformerNumber
	}
	return ""
}

type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{12}
}

func (x *Identifier) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type Identifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifiers []string `protobuf:"bytes,1,rep,name=identifiers,proto3" json:"identifiers,omitempty"`
}

func (x *Identifiers) Reset() {
	*x = Identifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifiers) ProtoMessage() {}

func (x *Identifiers) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifiers.ProtoReflect.Descriptor instead.
func (*Identifiers) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{13}
}

func (x *Identifiers) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

type CreateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldIdentifier string      `protobuf:"bytes,1,opt,name=oldIdentifier,proto3" json:"oldIdentifier,omitempty"`
	Connection    *Connection `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *CreateConnectionRequest) Reset() {
	*x = CreateConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConnectionRequest) ProtoMessage() {}

func (x *CreateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConnectionRequest.ProtoReflect.Descriptor instead.
func (*CreateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{14}
}

func (x *CreateConnectionRequest) GetOldIdentifier() string {
	if x != nil {
		return x.OldIdentifier
	}
	return ""
}

func (x *CreateConnectionRequest) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type UpdateConnectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string      `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Connection *Connection `protobuf:"bytes,2,opt,name=connection,proto3" json:"connection,omitempty"`
}

func (x *UpdateConnectionRequest) Reset() {
	*x = UpdateConnectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConnectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectionRequest) ProtoMessage() {}

func (x *UpdateConnectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectionRequest.ProtoReflect.Descriptor instead.
func (*UpdateConnectionRequest) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateConnectionRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *UpdateConnectionRequest) GetConnection() *Connection {
	if x != nil {
		return x.Connection
	}
	return nil
}

type UpdateMountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Mount      *Mount `protobuf:"bytes,2,opt,name=mount,proto3" json:"mount,omitempty"`
}

func (x *UpdateMountRequest) Reset() {
	*x = UpdateMountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMountRequest) ProtoMessage() {}

func (x *UpdateMountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMountRequest.ProtoReflect.Descriptor instead.
func (*UpdateMountRequest) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateMountRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *UpdateMountRequest) GetMount() *Mount {
	if x != nil {
		return x.Mount
	}
	return nil
}

type UpdateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string  `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Device     *Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateDeviceRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *UpdateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type UpdateConnectionStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier      string                     `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	ConnectionState Connection_ConnectionState `protobuf:"varint,2,opt,name=connectionState,proto3,enum=ppconnection.Connection_ConnectionState" json:"connectionState,omitempty"`
}

func (x *UpdateConnectionStateRequest) Reset() {
	*x = UpdateConnectionStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConnectionStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConnectionStateRequest) ProtoMessage() {}

func (x *UpdateConnectionStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConnectionStateRequest.ProtoReflect.Descriptor instead.
func (*UpdateConnectionStateRequest) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateConnectionStateRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *UpdateConnectionStateRequest) GetConnectionState() Connection_ConnectionState {
	if x != nil {
		return x.ConnectionState
	}
	return Connection_NO_CONNECTION_STATE
}

type UpdateJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Job        *Job   `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *UpdateJobRequest) Reset() {
	*x = UpdateJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateJobRequest) ProtoMessage() {}

func (x *UpdateJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateJobRequest.ProtoReflect.Descriptor instead.
func (*UpdateJobRequest) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateJobRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *UpdateJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type UpdateLinesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Identifier string `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Line1      int32  `protobuf:"varint,2,opt,name=line1,proto3" json:"line1,omitempty"`
	Line2      int32  `protobuf:"varint,3,opt,name=line2,proto3" json:"line2,omitempty"`
	Line3      int32  `protobuf:"varint,4,opt,name=line3,proto3" json:"line3,omitempty"`
}

func (x *UpdateLinesRequest) Reset() {
	*x = UpdateLinesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLinesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLinesRequest) ProtoMessage() {}

func (x *UpdateLinesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLinesRequest.ProtoReflect.Descriptor instead.
func (*UpdateLinesRequest) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{20}
}

func (x *UpdateLinesRequest) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *UpdateLinesRequest) GetLine1() int32 {
	if x != nil {
		return x.Line1
	}
	return 0
}

func (x *UpdateLinesRequest) GetLine2() int32 {
	if x != nil {
		return x.Line2
	}
	return 0
}

func (x *UpdateLinesRequest) GetLine3() int32 {
	if x != nil {
		return x.Line3
	}
	return 0
}

type GetAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstallNumber string `protobuf:"bytes,1,opt,name=installNumber,proto3" json:"installNumber,omitempty"`
}

func (x *GetAddressRequest) Reset() {
	*x = GetAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAddressRequest) ProtoMessage() {}

func (x *GetAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAddressRequest.ProtoReflect.Descriptor instead.
func (*GetAddressRequest) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetAddressRequest) GetInstallNumber() string {
	if x != nil {
		return x.InstallNumber
	}
	return ""
}

type GetDeviceBySerialNumberRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber string `protobuf:"bytes,1,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
}

func (x *GetDeviceBySerialNumberRequest) Reset() {
	*x = GetDeviceBySerialNumberRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceBySerialNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceBySerialNumberRequest) ProtoMessage() {}

func (x *GetDeviceBySerialNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceBySerialNumberRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceBySerialNumberRequest) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{22}
}

func (x *GetDeviceBySerialNumberRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply string `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{23}
}

func (x *Response) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreetAddress string `protobuf:"bytes,1,opt,name=streetAddress,proto3" json:"streetAddress,omitempty"`
	Town          string `protobuf:"bytes,2,opt,name=town,proto3" json:"town,omitempty"`
	Country       string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{24}
}

func (x *Address) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *Address) GetTown() string {
	if x != nil {
		return x.Town
	}
	return ""
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type LatLng struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lat float32 `protobuf:"fixed32,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float32 `protobuf:"fixed32,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (x *LatLng) Reset() {
	*x = LatLng{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatLng) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatLng) ProtoMessage() {}

func (x *LatLng) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatLng.ProtoReflect.Descriptor instead.
func (*LatLng) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{25}
}

func (x *LatLng) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *LatLng) GetLng() float32 {
	if x != nil {
		return x.Lng
	}
	return 0
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{26}
}

type TransformerList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transformers []*Transformer `protobuf:"bytes,1,rep,name=transformers,proto3" json:"transformers,omitempty"`
}

func (x *TransformerList) Reset() {
	*x = TransformerList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformerList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformerList) ProtoMessage() {}

func (x *TransformerList) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformerList.ProtoReflect.Descriptor instead.
func (*TransformerList) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{27}
}

func (x *TransformerList) GetTransformers() []*Transformer {
	if x != nil {
		return x.Transformers
	}
	return nil
}

type Transformer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Transformer) Reset() {
	*x = Transformer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transformer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transformer) ProtoMessage() {}

func (x *Transformer) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transformer.ProtoReflect.Descriptor instead.
func (*Transformer) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{28}
}

func (x *Transformer) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ConnectionImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionId string  `protobuf:"bytes,1,opt,name=connectionId,proto3" json:"connectionId,omitempty"`
	Value        string  `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	DateTime     string  `protobuf:"bytes,3,opt,name=dateTime,proto3" json:"dateTime,omitempty"`
	Orientation  int32   `protobuf:"varint,4,opt,name=orientation,proto3" json:"orientation,omitempty"`
	Latitude     float32 `protobuf:"fixed32,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude    float32 `protobuf:"fixed32,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Altitude     float32 `protobuf:"fixed32,7,opt,name=altitude,proto3" json:"altitude,omitempty"`
}

func (x *ConnectionImage) Reset() {
	*x = ConnectionImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_connection_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionImage) ProtoMessage() {}

func (x *ConnectionImage) ProtoReflect() protoreflect.Message {
	mi := &file_connection_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionImage.ProtoReflect.Descriptor instead.
func (*ConnectionImage) Descriptor() ([]byte, []int) {
	return file_connection_service_proto_rawDescGZIP(), []int{29}
}

func (x *ConnectionImage) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *ConnectionImage) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ConnectionImage) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *ConnectionImage) GetOrientation() int32 {
	if x != nil {
		return x.Orientation
	}
	return 0
}

func (x *ConnectionImage) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *ConnectionImage) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *ConnectionImage) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

var File_connection_service_proto protoreflect.FileDescriptor

var file_connection_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x70, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70,
	0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x6b, 0x0a, 0x19, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xb9, 0x07, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2c,
	0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6e,
	0x65, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x33, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x33, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x70, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29,
	0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63,
	0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x6a, 0x6f, 0x62,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x46, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0x3c, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x43, 0x50, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x53, 0x53, 0x45, 0x54, 0x10, 0x02, 0x22, 0x44, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x31, 0x31, 0x10, 0x01, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x33, 0x31, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x33, 0x31, 0x73,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x33, 0x31, 0x78, 0x10, 0x04, 0x22, 0xf1, 0x02, 0x0a,
	0x03, 0x4a, 0x6f, 0x62, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x08, 0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08,
	0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x46, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x60,
	0x0a, 0x08, 0x4a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f,
	0x5f, 0x4a, 0x4f, 0x42, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x55, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x53,
	0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05,
	0x22, 0xc6, 0x02, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x53, 0x53, 0x49, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x52,
	0x53, 0x53, 0x49, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x53,
	0x4e, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69,
	0x6e, 0x6b, 0x53, 0x4e, 0x52, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x12,
	0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x6e, 0x65, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x28, 0x0a, 0x05, 0x6c, 0x69, 0x6e,
	0x65, 0x33, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x6c, 0x69,
	0x6e, 0x65, 0x33, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x53, 0x53, 0x49, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x53, 0x53, 0x49, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x4e, 0x52, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x4e, 0x52, 0x22, 0x3a, 0x0a, 0x04, 0x4c, 0x69, 0x6e,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65,
	0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74,
	0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x32, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x6f, 0x77, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c,
	0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x6c, 0x61, 0x74, 0x22, 0xd7, 0x03, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x65, 0x6e, 0x63,
	0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x45, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x09, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x4f, 0x53, 0x53, 0x41, 0x52, 0x4d,
	0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x42, 0x4f, 0x41, 0x52,
	0x44, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x4f, 0x58,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x55, 0x42, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x49, 0x4c, 0x4c, 0x41, 0x52, 0x5f, 0x42, 0x4f, 0x58,
	0x10, 0x05, 0x22, 0x4a, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x4c, 0x4f, 0x53,
	0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49,
	0x4e, 0x47, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x52, 0x49, 0x50, 0x4c, 0x45, 0x10, 0x03, 0x22, 0xad,
	0x02, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x55, 0x49, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x55, 0x49, 0x12,
	0x3b, 0x0a, 0x0b, 0x6c, 0x6f, 0x52, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x52, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0b, 0x6c, 0x6f, 0x52, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x71,
	0x74, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6d, 0x71, 0x74, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x70, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xc3,
	0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x52, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x26,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x55, 0x49,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x55, 0x49, 0x12, 0x36, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x4b, 0x65, 0x79, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x52, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x0a, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x2f, 0x0a, 0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x79, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6c, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x6c, 0x64, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x05, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x63, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x92,
	0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x52, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x76, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x33, 0x22, 0x39, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22,
	0x44, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x20, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x5d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x6f, 0x77, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x6f, 0x77, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x2c, 0x0a, 0x06, 0x4c, 0x61, 0x74, 0x4c, 0x6e, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c,
	0x61, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x6c, 0x6e, 0x67, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x50, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x73, 0x22,
	0x21, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xdf, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x32, 0xf4, 0x0d, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x70,
	0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x19, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x70, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x12, 0x30, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a,
	0x18, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x6f, 0x72,
	0x49, 0x44, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x1a, 0x19, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65,
	0x72, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x70,
	0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x70, 0x70, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x68, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x46, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x16, 0x2e,
	0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2a, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70,
	0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4a, 0x6f, 0x62, 0x12, 0x1e, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x70,
	0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x70, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x2e, 0x70,
	0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x1a, 0x16, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x70,
	0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x70,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1d, 0x2e,
	0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x18, 0x2e,
	0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x38, 0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x75, 0x70, 0x12, 0x13, 0x2e, 0x70,
	0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x70, 0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x70,
	0x70, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_connection_service_proto_rawDescOnce sync.Once
	file_connection_service_proto_rawDescData = file_connection_service_proto_rawDesc
)

func file_connection_service_proto_rawDescGZIP() []byte {
	file_connection_service_proto_rawDescOnce.Do(func() {
		file_connection_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_connection_service_proto_rawDescData)
	})
	return file_connection_service_proto_rawDescData
}

var file_connection_service_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_connection_service_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_connection_service_proto_goTypes = []interface{}{
	(Connection_ConnectionState)(0),            // 0: ppconnection.Connection.ConnectionState
	(Connection_ConnectionType)(0),             // 1: ppconnection.Connection.ConnectionType
	(Connection_ModelType)(0),                  // 2: ppconnection.Connection.ModelType
	(Job_JobState)(0),                          // 3: ppconnection.Job.JobState
	(Mount_MountType)(0),                       // 4: ppconnection.Mount.MountType
	(Mount_EnclosureType)(0),                   // 5: ppconnection.Mount.EnclosureType
	(*Connections)(nil),                        // 6: ppconnection.Connections
	(*MultipleConnectionRequest)(nil),          // 7: ppconnection.MultipleConnectionRequest
	(*Connection)(nil),                         // 8: ppconnection.Connection
	(*Job)(nil),                                // 9: ppconnection.Job
	(*TestResult)(nil),                         // 10: ppconnection.TestResult
	(*Line)(nil),                               // 11: ppconnection.Line
	(*Location)(nil),                           // 12: ppconnection.Location
	(*Mount)(nil),                              // 13: ppconnection.Mount
	(*Device)(nil),                             // 14: ppconnection.Device
	(*LoRaDetails)(nil),                        // 15: ppconnection.LoRaDetails
	(*GetConnectionsRequest)(nil),              // 16: ppconnection.GetConnectionsRequest
	(*GetConnectionsByTransformerRequest)(nil), // 17: ppconnection.GetConnectionsByTransformerRequest
	(*Identifier)(nil),                         // 18: ppconnection.Identifier
	(*Identifiers)(nil),                        // 19: ppconnection.Identifiers
	(*CreateConnectionRequest)(nil),            // 20: ppconnection.CreateConnectionRequest
	(*UpdateConnectionRequest)(nil),            // 21: ppconnection.UpdateConnectionRequest
	(*UpdateMountRequest)(nil),                 // 22: ppconnection.UpdateMountRequest
	(*UpdateDeviceRequest)(nil),                // 23: ppconnection.UpdateDeviceRequest
	(*UpdateConnectionStateRequest)(nil),       // 24: ppconnection.UpdateConnectionStateRequest
	(*UpdateJobRequest)(nil),                   // 25: ppconnection.UpdateJobRequest
	(*UpdateLinesRequest)(nil),                 // 26: ppconnection.UpdateLinesRequest
	(*GetAddressRequest)(nil),                  // 27: ppconnection.GetAddressRequest
	(*GetDeviceBySerialNumberRequest)(nil),     // 28: ppconnection.GetDeviceBySerialNumberRequest
	(*Response)(nil),                           // 29: ppconnection.Response
	(*Address)(nil),                            // 30: ppconnection.Address
	(*LatLng)(nil),                             // 31: ppconnection.LatLng
	(*Empty)(nil),                              // 32: ppconnection.Empty
	(*TransformerList)(nil),                    // 33: ppconnection.TransformerList
	(*Transformer)(nil),                        // 34: ppconnection.Transformer
	(*ConnectionImage)(nil),                    // 35: ppconnection.ConnectionImage
}
var file_connection_service_proto_depIdxs = []int32{
	8,  // 0: ppconnection.Connections.connections:type_name -> ppconnection.Connection
	8,  // 1: ppconnection.MultipleConnectionRequest.connection:type_name -> ppconnection.Connection
	0,  // 2: ppconnection.Connection.connectionState:type_name -> ppconnection.Connection.ConnectionState
	1,  // 3: ppconnection.Connection.connectionType:type_name -> ppconnection.Connection.ConnectionType
	14, // 4: ppconnection.Connection.device:type_name -> ppconnection.Device
	12, // 5: ppconnection.Connection.location:type_name -> ppconnection.Location
	2,  // 6: ppconnection.Connection.modelType:type_name -> ppconnection.Connection.ModelType
	13, // 7: ppconnection.Connection.mount:type_name -> ppconnection.Mount
	9,  // 8: ppconnection.Connection.job:type_name -> ppconnection.Job
	3,  // 9: ppconnection.Job.jobState:type_name -> ppconnection.Job.JobState
	10, // 10: ppconnection.Job.testResult:type_name -> ppconnection.TestResult
	11, // 11: ppconnection.TestResult.line1:type_name -> ppconnection.Line
	11, // 12: ppconnection.TestResult.line2:type_name -> ppconnection.Line
	11, // 13: ppconnection.TestResult.line3:type_name -> ppconnection.Line
	12, // 14: ppconnection.Mount.location:type_name -> ppconnection.Location
	4,  // 15: ppconnection.Mount.mountType:type_name -> ppconnection.Mount.MountType
	5,  // 16: ppconnection.Mount.enclosureType:type_name -> ppconnection.Mount.EnclosureType
	15, // 17: ppconnection.Device.loRaDetails:type_name -> ppconnection.LoRaDetails
	8,  // 18: ppconnection.CreateConnectionRequest.connection:type_name -> ppconnection.Connection
	8,  // 19: ppconnection.UpdateConnectionRequest.connection:type_name -> ppconnection.Connection
	13, // 20: ppconnection.UpdateMountRequest.mount:type_name -> ppconnection.Mount
	14, // 21: ppconnection.UpdateDeviceRequest.device:type_name -> ppconnection.Device
	0,  // 22: ppconnection.UpdateConnectionStateRequest.connectionState:type_name -> ppconnection.Connection.ConnectionState
	9,  // 23: ppconnection.UpdateJobRequest.job:type_name -> ppconnection.Job
	34, // 24: ppconnection.TransformerList.transformers:type_name -> ppconnection.Transformer
	16, // 25: ppconnection.ConnectionService.GetConnections:input_type -> ppconnection.GetConnectionsRequest
	16, // 26: ppconnection.ConnectionService.GetLiveConnections:input_type -> ppconnection.GetConnectionsRequest
	17, // 27: ppconnection.ConnectionService.GetConnectionsByTransformer:input_type -> ppconnection.GetConnectionsByTransformerRequest
	18, // 28: ppconnection.ConnectionService.GetConnection:input_type -> ppconnection.Identifier
	18, // 29: ppconnection.ConnectionService.GetConnectionsForIDNumber:input_type -> ppconnection.Identifier
	32, // 30: ppconnection.ConnectionService.GetTransformers:input_type -> ppconnection.Empty
	20, // 31: ppconnection.ConnectionService.CreateConnection:input_type -> ppconnection.CreateConnectionRequest
	8,  // 32: ppconnection.ConnectionService.CreatePendingConnection:input_type -> ppconnection.Connection
	7,  // 33: ppconnection.ConnectionService.CreateMultiplePendingConnections:input_type -> ppconnection.MultipleConnectionRequest
	21, // 34: ppconnection.ConnectionService.UpdateConnection:input_type -> ppconnection.UpdateConnectionRequest
	18, // 35: ppconnection.ConnectionService.DeleteConnection:input_type -> ppconnection.Identifier
	24, // 36: ppconnection.ConnectionService.UpdateConnectionState:input_type -> ppconnection.UpdateConnectionStateRequest
	25, // 37: ppconnection.ConnectionService.UpdateJob:input_type -> ppconnection.UpdateJobRequest
	26, // 38: ppconnection.ConnectionService.UpdateLines:input_type -> ppconnection.UpdateLinesRequest
	22, // 39: ppconnection.ConnectionService.UpdateMount:input_type -> ppconnection.UpdateMountRequest
	27, // 40: ppconnection.ConnectionService.GetAddress:input_type -> ppconnection.GetAddressRequest
	14, // 41: ppconnection.ConnectionService.CreateDevice:input_type -> ppconnection.Device
	28, // 42: ppconnection.ConnectionService.GetDeviceBySerialNumber:input_type -> ppconnection.GetDeviceBySerialNumberRequest
	35, // 43: ppconnection.ConnectionService.CreateImage:input_type -> ppconnection.ConnectionImage
	18, // 44: ppconnection.ConnectionService.GetImage:input_type -> ppconnection.Identifier
	18, // 45: ppconnection.ConnectionService.DeleteImage:input_type -> ppconnection.Identifier
	32, // 46: ppconnection.ConnectionService.Cleanup:input_type -> ppconnection.Empty
	6,  // 47: ppconnection.ConnectionService.GetConnections:output_type -> ppconnection.Connections
	6,  // 48: ppconnection.ConnectionService.GetLiveConnections:output_type -> ppconnection.Connections
	6,  // 49: ppconnection.ConnectionService.GetConnectionsByTransformer:output_type -> ppconnection.Connections
	8,  // 50: ppconnection.ConnectionService.GetConnection:output_type -> ppconnection.Connection
	6,  // 51: ppconnection.ConnectionService.GetConnectionsForIDNumber:output_type -> ppconnection.Connections
	33, // 52: ppconnection.ConnectionService.GetTransformers:output_type -> ppconnection.TransformerList
	18, // 53: ppconnection.ConnectionService.CreateConnection:output_type -> ppconnection.Identifier
	18, // 54: ppconnection.ConnectionService.CreatePendingConnection:output_type -> ppconnection.Identifier
	19, // 55: ppconnection.ConnectionService.CreateMultiplePendingConnections:output_type -> ppconnection.Identifiers
	29, // 56: ppconnection.ConnectionService.UpdateConnection:output_type -> ppconnection.Response
	29, // 57: ppconnection.ConnectionService.DeleteConnection:output_type -> ppconnection.Response
	29, // 58: ppconnection.ConnectionService.UpdateConnectionState:output_type -> ppconnection.Response
	29, // 59: ppconnection.ConnectionService.UpdateJob:output_type -> ppconnection.Response
	29, // 60: ppconnection.ConnectionService.UpdateLines:output_type -> ppconnection.Response
	29, // 61: ppconnection.ConnectionService.UpdateMount:output_type -> ppconnection.Response
	12, // 62: ppconnection.ConnectionService.GetAddress:output_type -> ppconnection.Location
	29, // 63: ppconnection.ConnectionService.CreateDevice:output_type -> ppconnection.Response
	14, // 64: ppconnection.ConnectionService.GetDeviceBySerialNumber:output_type -> ppconnection.Device
	18, // 65: ppconnection.ConnectionService.CreateImage:output_type -> ppconnection.Identifier
	35, // 66: ppconnection.ConnectionService.GetImage:output_type -> ppconnection.ConnectionImage
	29, // 67: ppconnection.ConnectionService.DeleteImage:output_type -> ppconnection.Response
	29, // 68: ppconnection.ConnectionService.Cleanup:output_type -> ppconnection.Response
	47, // [47:69] is the sub-list for method output_type
	25, // [25:47] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_connection_service_proto_init() }
func file_connection_service_proto_init() {
	if File_connection_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_connection_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultipleConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Connection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Line); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoRaDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConnectionsByTransformerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConnectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConnectionStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLinesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceBySerialNumberRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LatLng); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformerList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transformer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_connection_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_connection_service_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_connection_service_proto_goTypes,
		DependencyIndexes: file_connection_service_proto_depIdxs,
		EnumInfos:         file_connection_service_proto_enumTypes,
		MessageInfos:      file_connection_service_proto_msgTypes,
	}.Build()
	File_connection_service_proto = out.File
	file_connection_service_proto_rawDesc = nil
	file_connection_service_proto_goTypes = nil
	file_connection_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConnectionServiceClient is the client API for ConnectionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnectionServiceClient interface {
	GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*Connections, error)
	GetLiveConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*Connections, error)
	GetConnectionsByTransformer(ctx context.Context, in *GetConnectionsByTransformerRequest, opts ...grpc.CallOption) (*Connections, error)
	GetConnection(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Connection, error)
	GetConnectionsForIDNumber(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Connections, error)
	GetTransformers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TransformerList, error)
	CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*Identifier, error)
	CreatePendingConnection(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Identifier, error)
	CreateMultiplePendingConnections(ctx context.Context, in *MultipleConnectionRequest, opts ...grpc.CallOption) (*Identifiers, error)
	UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteConnection(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Response, error)
	UpdateConnectionState(ctx context.Context, in *UpdateConnectionStateRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateLines(ctx context.Context, in *UpdateLinesRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateMount(ctx context.Context, in *UpdateMountRequest, opts ...grpc.CallOption) (*Response, error)
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*Location, error)
	CreateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Response, error)
	GetDeviceBySerialNumber(ctx context.Context, in *GetDeviceBySerialNumberRequest, opts ...grpc.CallOption) (*Device, error)
	CreateImage(ctx context.Context, in *ConnectionImage, opts ...grpc.CallOption) (*Identifier, error)
	GetImage(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ConnectionImage, error)
	DeleteImage(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Response, error)
	Cleanup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
}

type connectionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionServiceClient(cc grpc.ClientConnInterface) ConnectionServiceClient {
	return &connectionServiceClient{cc}
}

func (c *connectionServiceClient) GetConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*Connections, error) {
	out := new(Connections)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/GetConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetLiveConnections(ctx context.Context, in *GetConnectionsRequest, opts ...grpc.CallOption) (*Connections, error) {
	out := new(Connections)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/GetLiveConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetConnectionsByTransformer(ctx context.Context, in *GetConnectionsByTransformerRequest, opts ...grpc.CallOption) (*Connections, error) {
	out := new(Connections)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/GetConnectionsByTransformer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetConnection(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Connection, error) {
	out := new(Connection)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/GetConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetConnectionsForIDNumber(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Connections, error) {
	out := new(Connections)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/GetConnectionsForIDNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetTransformers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TransformerList, error) {
	out := new(TransformerList)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/GetTransformers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) CreateConnection(ctx context.Context, in *CreateConnectionRequest, opts ...grpc.CallOption) (*Identifier, error) {
	out := new(Identifier)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/CreateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) CreatePendingConnection(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Identifier, error) {
	out := new(Identifier)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/CreatePendingConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) CreateMultiplePendingConnections(ctx context.Context, in *MultipleConnectionRequest, opts ...grpc.CallOption) (*Identifiers, error) {
	out := new(Identifiers)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/CreateMultiplePendingConnections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) UpdateConnection(ctx context.Context, in *UpdateConnectionRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/UpdateConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) DeleteConnection(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/DeleteConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) UpdateConnectionState(ctx context.Context, in *UpdateConnectionStateRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/UpdateConnectionState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) UpdateJob(ctx context.Context, in *UpdateJobRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/UpdateJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) UpdateLines(ctx context.Context, in *UpdateLinesRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/UpdateLines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) UpdateMount(ctx context.Context, in *UpdateMountRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/UpdateMount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) CreateDevice(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetDeviceBySerialNumber(ctx context.Context, in *GetDeviceBySerialNumberRequest, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/GetDeviceBySerialNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) CreateImage(ctx context.Context, in *ConnectionImage, opts ...grpc.CallOption) (*Identifier, error) {
	out := new(Identifier)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/CreateImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) GetImage(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*ConnectionImage, error) {
	out := new(ConnectionImage)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/GetImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) DeleteImage(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/DeleteImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionServiceClient) Cleanup(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ppconnection.ConnectionService/Cleanup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionServiceServer is the server API for ConnectionService service.
type ConnectionServiceServer interface {
	GetConnections(context.Context, *GetConnectionsRequest) (*Connections, error)
	GetLiveConnections(context.Context, *GetConnectionsRequest) (*Connections, error)
	GetConnectionsByTransformer(context.Context, *GetConnectionsByTransformerRequest) (*Connections, error)
	GetConnection(context.Context, *Identifier) (*Connection, error)
	GetConnectionsForIDNumber(context.Context, *Identifier) (*Connections, error)
	GetTransformers(context.Context, *Empty) (*TransformerList, error)
	CreateConnection(context.Context, *CreateConnectionRequest) (*Identifier, error)
	CreatePendingConnection(context.Context, *Connection) (*Identifier, error)
	CreateMultiplePendingConnections(context.Context, *MultipleConnectionRequest) (*Identifiers, error)
	UpdateConnection(context.Context, *UpdateConnectionRequest) (*Response, error)
	DeleteConnection(context.Context, *Identifier) (*Response, error)
	UpdateConnectionState(context.Context, *UpdateConnectionStateRequest) (*Response, error)
	UpdateJob(context.Context, *UpdateJobRequest) (*Response, error)
	UpdateLines(context.Context, *UpdateLinesRequest) (*Response, error)
	UpdateMount(context.Context, *UpdateMountRequest) (*Response, error)
	GetAddress(context.Context, *GetAddressRequest) (*Location, error)
	CreateDevice(context.Context, *Device) (*Response, error)
	GetDeviceBySerialNumber(context.Context, *GetDeviceBySerialNumberRequest) (*Device, error)
	CreateImage(context.Context, *ConnectionImage) (*Identifier, error)
	GetImage(context.Context, *Identifier) (*ConnectionImage, error)
	DeleteImage(context.Context, *Identifier) (*Response, error)
	Cleanup(context.Context, *Empty) (*Response, error)
}

// UnimplementedConnectionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConnectionServiceServer struct {
}

func (*UnimplementedConnectionServiceServer) GetConnections(context.Context, *GetConnectionsRequest) (*Connections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnections not implemented")
}
func (*UnimplementedConnectionServiceServer) GetLiveConnections(context.Context, *GetConnectionsRequest) (*Connections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLiveConnections not implemented")
}
func (*UnimplementedConnectionServiceServer) GetConnectionsByTransformer(context.Context, *GetConnectionsByTransformerRequest) (*Connections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionsByTransformer not implemented")
}
func (*UnimplementedConnectionServiceServer) GetConnection(context.Context, *Identifier) (*Connection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (*UnimplementedConnectionServiceServer) GetConnectionsForIDNumber(context.Context, *Identifier) (*Connections, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionsForIDNumber not implemented")
}
func (*UnimplementedConnectionServiceServer) GetTransformers(context.Context, *Empty) (*TransformerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransformers not implemented")
}
func (*UnimplementedConnectionServiceServer) CreateConnection(context.Context, *CreateConnectionRequest) (*Identifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConnection not implemented")
}
func (*UnimplementedConnectionServiceServer) CreatePendingConnection(context.Context, *Connection) (*Identifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePendingConnection not implemented")
}
func (*UnimplementedConnectionServiceServer) CreateMultiplePendingConnections(context.Context, *MultipleConnectionRequest) (*Identifiers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiplePendingConnections not implemented")
}
func (*UnimplementedConnectionServiceServer) UpdateConnection(context.Context, *UpdateConnectionRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnection not implemented")
}
func (*UnimplementedConnectionServiceServer) DeleteConnection(context.Context, *Identifier) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConnection not implemented")
}
func (*UnimplementedConnectionServiceServer) UpdateConnectionState(context.Context, *UpdateConnectionStateRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectionState not implemented")
}
func (*UnimplementedConnectionServiceServer) UpdateJob(context.Context, *UpdateJobRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJob not implemented")
}
func (*UnimplementedConnectionServiceServer) UpdateLines(context.Context, *UpdateLinesRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLines not implemented")
}
func (*UnimplementedConnectionServiceServer) UpdateMount(context.Context, *UpdateMountRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMount not implemented")
}
func (*UnimplementedConnectionServiceServer) GetAddress(context.Context, *GetAddressRequest) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (*UnimplementedConnectionServiceServer) CreateDevice(context.Context, *Device) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (*UnimplementedConnectionServiceServer) GetDeviceBySerialNumber(context.Context, *GetDeviceBySerialNumberRequest) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceBySerialNumber not implemented")
}
func (*UnimplementedConnectionServiceServer) CreateImage(context.Context, *ConnectionImage) (*Identifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImage not implemented")
}
func (*UnimplementedConnectionServiceServer) GetImage(context.Context, *Identifier) (*ConnectionImage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImage not implemented")
}
func (*UnimplementedConnectionServiceServer) DeleteImage(context.Context, *Identifier) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteImage not implemented")
}
func (*UnimplementedConnectionServiceServer) Cleanup(context.Context, *Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}

func RegisterConnectionServiceServer(s *grpc.Server, srv ConnectionServiceServer) {
	s.RegisterService(&_ConnectionService_serviceDesc, srv)
}

func _ConnectionService_GetConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/GetConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetConnections(ctx, req.(*GetConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetLiveConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetLiveConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/GetLiveConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetLiveConnections(ctx, req.(*GetConnectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetConnectionsByTransformer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionsByTransformerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetConnectionsByTransformer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/GetConnectionsByTransformer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetConnectionsByTransformer(ctx, req.(*GetConnectionsByTransformerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/GetConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetConnection(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetConnectionsForIDNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetConnectionsForIDNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/GetConnectionsForIDNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetConnectionsForIDNumber(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetTransformers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetTransformers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/GetTransformers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetTransformers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_CreateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).CreateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/CreateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).CreateConnection(ctx, req.(*CreateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_CreatePendingConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).CreatePendingConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/CreatePendingConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).CreatePendingConnection(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_CreateMultiplePendingConnections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultipleConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).CreateMultiplePendingConnections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/CreateMultiplePendingConnections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).CreateMultiplePendingConnections(ctx, req.(*MultipleConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_UpdateConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).UpdateConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/UpdateConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).UpdateConnection(ctx, req.(*UpdateConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_DeleteConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).DeleteConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/DeleteConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).DeleteConnection(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_UpdateConnectionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).UpdateConnectionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/UpdateConnectionState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).UpdateConnectionState(ctx, req.(*UpdateConnectionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).UpdateJob(ctx, req.(*UpdateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_UpdateLines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).UpdateLines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/UpdateLines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).UpdateLines(ctx, req.(*UpdateLinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_UpdateMount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).UpdateMount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/UpdateMount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).UpdateMount(ctx, req.(*UpdateMountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).CreateDevice(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetDeviceBySerialNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceBySerialNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetDeviceBySerialNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/GetDeviceBySerialNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetDeviceBySerialNumber(ctx, req.(*GetDeviceBySerialNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_CreateImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionImage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).CreateImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/CreateImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).CreateImage(ctx, req.(*ConnectionImage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_GetImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).GetImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/GetImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).GetImage(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_DeleteImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).DeleteImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/DeleteImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).DeleteImage(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionService_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionServiceServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ppconnection.ConnectionService/Cleanup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionServiceServer).Cleanup(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConnectionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ppconnection.ConnectionService",
	HandlerType: (*ConnectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnections",
			Handler:    _ConnectionService_GetConnections_Handler,
		},
		{
			MethodName: "GetLiveConnections",
			Handler:    _ConnectionService_GetLiveConnections_Handler,
		},
		{
			MethodName: "GetConnectionsByTransformer",
			Handler:    _ConnectionService_GetConnectionsByTransformer_Handler,
		},
		{
			MethodName: "GetConnection",
			Handler:    _ConnectionService_GetConnection_Handler,
		},
		{
			MethodName: "GetConnectionsForIDNumber",
			Handler:    _ConnectionService_GetConnectionsForIDNumber_Handler,
		},
		{
			MethodName: "GetTransformers",
			Handler:    _ConnectionService_GetTransformers_Handler,
		},
		{
			MethodName: "CreateConnection",
			Handler:    _ConnectionService_CreateConnection_Handler,
		},
		{
			MethodName: "CreatePendingConnection",
			Handler:    _ConnectionService_CreatePendingConnection_Handler,
		},
		{
			MethodName: "CreateMultiplePendingConnections",
			Handler:    _ConnectionService_CreateMultiplePendingConnections_Handler,
		},
		{
			MethodName: "UpdateConnection",
			Handler:    _ConnectionService_UpdateConnection_Handler,
		},
		{
			MethodName: "DeleteConnection",
			Handler:    _ConnectionService_DeleteConnection_Handler,
		},
		{
			MethodName: "UpdateConnectionState",
			Handler:    _ConnectionService_UpdateConnectionState_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _ConnectionService_UpdateJob_Handler,
		},
		{
			MethodName: "UpdateLines",
			Handler:    _ConnectionService_UpdateLines_Handler,
		},
		{
			MethodName: "UpdateMount",
			Handler:    _ConnectionService_UpdateMount_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _ConnectionService_GetAddress_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _ConnectionService_CreateDevice_Handler,
		},
		{
			MethodName: "GetDeviceBySerialNumber",
			Handler:    _ConnectionService_GetDeviceBySerialNumber_Handler,
		},
		{
			MethodName: "CreateImage",
			Handler:    _ConnectionService_CreateImage_Handler,
		},
		{
			MethodName: "GetImage",
			Handler:    _ConnectionService_GetImage_Handler,
		},
		{
			MethodName: "DeleteImage",
			Handler:    _ConnectionService_DeleteImage_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _ConnectionService_Cleanup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connection-service.proto",
}
